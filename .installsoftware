#!/bin/bash

source ~/.functions

SOFTWARE_FOLDER="$HOME/software"

createSoftwareFolder(){
  mkdir -p $SOFTWARE_FOLDER
}

install-vim(){
  sudo dnf install vim-common vim-data vim-enhanced vim-filesystem vim-minimal \
    vim-go \
	  vim-syntastic vim-syntastic-asciidoc vim-syntastic-css vim-syntastic-eruby \
	  vim-syntastic-html vim-syntastic-java vim-syntastic-json vim-syntastic-perl \
	  vim-syntastic-php vim-syntastic-pod vim-syntastic-ruby vim-syntastic-sh \
	  vim-syntastic-text vim-syntastic-xml vim-syntastic-yaml vim-ansible \
    vim-syntastic-ansible vim-syntastic-c vim-syntastic-cpp vim-syntastic-go \
    vim-syntastic-python vim-syntastic-scala vim-syntastic-spec \
    vim-syntastic-xhtml
}

install-crc(){

  # https://github.com/crc-org/crc/releases
  # https://developers.redhat.com/content-gateway/rest/mirror/pub/openshift-v4/clients/crc
  # https://developers.redhat.com/content-gateway/file/pub/openshift-v4/clients/crc/2.15.0/crc-linux-amd64.tar.xz

  createSoftwareFolder

  if [ ! -z $1 ]; then
    VERSION_CRC=$1
  fi

  echo "About to install CodeReadyContainers (crc) version : $VERSION_CRC"

  # VERSION_CRC is to be found in ~.exports
  CRC_FILENAME=crc-linux-$VERSION_CRC-amd64
  CRC_ARCHIVE_NAME=$CRC_FILENAME.tar.xz
  CRC_ARCHIVE_PATH="$SOFTWARE_FOLDER/$CRC_ARCHIVE_NAME"
  CRC_DOWNLOAD_ADDRESS=https://developers.redhat.com/content-gateway/file/pub/openshift-v4/clients/crc/$VERSION_CRC/crc-linux-amd64.tar.xz
  CRC_INSTALL_DIR="/opt/crc"

  if [ ! -e "$CRC_ARCHIVE_PATH" ]; then
    echo "Downloading: $CRC_DOWNLOAD_ADDRESS..."
    echo "Download location: $CRC_ARCHIVE_PATH"
    wget -P $SOFTWARE_FOLDER -O $CRC_ARCHIVE_PATH $CRC_DOWNLOAD_ADDRESS
    if [ $? -ne 0 ]; then
      echo "Not possible to download CodeReadyContainers (crc)."
      sleep 20
      exit 1
    fi
  else
    echo "CodeReadyContainers (crc) archive already exists."
  fi

  if [ ! -d "$CRC_INSTALL_DIR" ]; then
    sudo mkdir -p $CRC_INSTALL_DIR
    sudo chown $LOGNAME:$LOGNAME -R $CRC_INSTALL_DIR
  fi

  if [ ! -d "$CRC_INSTALL_DIR/$CRC_FILENAME" ]; then
    echo "Do installation of $CRC_FILENAME"
    tar -xf $CRC_ARCHIVE_PATH -C $CRC_INSTALL_DIR
  else
    echo "$CRC_FILENAME is already installed"
  fi

  echo ""
  echo "To use these binaries follow the instructions at https://console.redhat.com/openshift/create/local to obtain the needed pull-secret"
  echo "Get started by - crc start"
}

install-okd(){

  # https://github.com/okd-project/okd/releases
  # https://github.com/okd-project/okd/releases/download/4.12.0-0.okd-2023-03-18-084815/openshift-install-linux-4.12.0-0.okd-2023-03-18-084815.tar.gz
  # https://github.com/okd-project/okd/releases/download/4.12.0-0.okd-2023-03-18-084815/openshift-client-linux-4.12.0-0.okd-2023-03-18-084815.tar.gz

  createSoftwareFolder

  if [ ! -z $1 ]; then
    VERSION_OKD=$1
  fi

  echo "About to install OKD version : $VERSION_OKD"

  ODK_INSTALL_DIR="/opt/okd"
  if [ ! -d "$ODK_INSTALL_DIR" ]; then
    sudo mkdir -p $ODK_INSTALL_DIR
    sudo chown $LOGNAME:$LOGNAME -R $ODK_INSTALL_DIR
  fi

  # Install

  ODK_INSTALL_INSTALL_DIR="$ODK_INSTALL_DIR/openshift-install-linux-$VERSION_OKD"
  if [ ! -d "$ODK_INSTALL_INSTALL_DIR" ]; then
    sudo mkdir -p $ODK_INSTALL_INSTALL_DIR
    sudo chown $LOGNAME:$LOGNAME -R $ODK_INSTALL_INSTALL_DIR
  fi

  # VERSION_CRC is to be found in ~.exports
  ODK_INSTALL_FILENAME=openshift-install-linux-$VERSION_OKD
  ODK_INSTALL_ARCHIVE_NAME=$ODK_INSTALL_FILENAME.tar.gz
  ODK_INSTALL_ARCHIVE_PATH="$SOFTWARE_FOLDER/$ODK_INSTALL_ARCHIVE_NAME"
  ODK_INSTALL_DOWNLOAD_ADDRESS=https://github.com/okd-project/okd/releases/download/$VERSION_OKD/$ODK_INSTALL_ARCHIVE_NAME

  if [ ! -e "$ODK_INSTALL_ARCHIVE_PATH" ]; then
    echo "Downloading: $ODK_INSTALL_DOWNLOAD_ADDRESS..."
    echo "Download location: $ODK_INSTALL_ARCHIVE_PATH"
    wget -P $SOFTWARE_FOLDER -O $ODK_INSTALL_ARCHIVE_PATH $ODK_INSTALL_DOWNLOAD_ADDRESS
    if [ $? -ne 0 ]; then
      echo "Not possible to download ODK (Install)."
      sleep 20
      exit 1
    fi
  else
    echo "ODK (Install) archive already exists."
  fi

  if [ ! -f "$ODK_INSTALL_INSTALL_DIR/openshift-install" ]; then
    echo "Do installation of $ODK_INSTALL_FILENAME"
    tar -xf $ODK_INSTALL_ARCHIVE_PATH -C $ODK_INSTALL_INSTALL_DIR
  else
    echo "$ODK_INSTALL_FILENAME is already installed"
  fi

  # Client

  ODK_CLIENT_INSTALL_DIR="$ODK_INSTALL_DIR/openshift-client-linux-$VERSION_OKD"
  if [ ! -d "$ODK_CLIENT_INSTALL_DIR" ]; then
    sudo mkdir -p $ODK_CLIENT_INSTALL_DIR
    sudo chown $LOGNAME:$LOGNAME -R $ODK_CLIENT_INSTALL_DIR
  fi

  # VERSION_CRC is to be found in ~.exports
  ODK_CLIENT_FILENAME=openshift-client-linux-$VERSION_OKD
  ODK_CLIENT_ARCHIVE_NAME=$ODK_CLIENT_FILENAME.tar.gz
  ODK_CLIENT_ARCHIVE_PATH="$SOFTWARE_FOLDER/$ODK_CLIENT_ARCHIVE_NAME"
  ODK_CLIENT_DOWNLOAD_ADDRESS=https://github.com/okd-project/okd/releases/download/$VERSION_OKD/$ODK_CLIENT_ARCHIVE_NAME

  if [ ! -e "$ODK_CLIENT_ARCHIVE_PATH" ]; then
    echo "Downloading: $ODK_DOWNLOAD_ADDRESS..."
    echo "Download location: $ODK_CLIENT_ARCHIVE_PATH"
    wget -P $SOFTWARE_FOLDER -O $ODK_CLIENT_ARCHIVE_PATH $ODK_CLIENT_DOWNLOAD_ADDRESS
    if [ $? -ne 0 ]; then
      echo "Not possible to download ODK (Client)."
      sleep 20
      exit 1
    fi
  else
    echo "ODK (Client) archive already exists."
  fi

  if [ ! -f "$ODK_CLIENT_INSTALL_DIR/oc" ]; then
    echo "Do installation of $ODK_CLIENT_FILENAME"
    tar -xf $ODK_CLIENT_ARCHIVE_PATH -C $ODK_CLIENT_INSTALL_DIR
  else
    echo "$ODK_CLIENT_FILENAME is already installed"
  fi

  echo "To create the first cluster use:"
  echo "  openshift-install create cluster"

}

install-kafka(){

  # https://kafka.apache.org/downloads

  createSoftwareFolder

  if [ ! -z $1 ]; then
    VERSION_KAFKA=$1
  fi

   if [ ! -z $2 ]; then
    VERSION_KAFKA_SCALA=$2
  fi

  echo "About to install Kafka version : "$VERSION_KAFKA_SCALA"-$VERSION_KAFKA"

  KAFKA_FILENAME="kafka_"$VERSION_KAFKA_SCALA"-$VERSION_KAFKA"
  KAFKA_ARCHIVE_NAME="$KAFKA_FILENAME.tgz"
  KAFKA_ARCHIVE_PATH="$SOFTWARE_FOLDER/$KAFKA_ARCHIVE_NAME"
  KAFKA_DOWNLOAD_ADDRESS=https://downloads.apache.org/kafka/$VERSION_KAFKA/$KAFKA_ARCHIVE_NAME

  if [ ! -e "$KAFKA_ARCHIVE_PATH" ]; then
    echo "Downloading: $KAFKA_DOWNLOAD_ADDRESS..."
    echo "Download location: $KAFKA_ARCHIVE_PATH"
    wget -q -P $SOFTWARE_FOLDER $KAFKA_DOWNLOAD_ADDRESS
    if [ $? -ne 0 ]; then
      echo "Not possible to download Kafka."
      sleep 20
      exit 1
    fi
  else
    echo "Kafka archive already exists."
  fi

  if [ ! -d "$KAFKA_INSTALL_DIR" ]; then
    sudo mkdir -p $KAFKA_INSTALL_DIR
    sudo chown $LOGNAME:$LOGNAME -R $KAFKA_INSTALL_DIR
  fi

  if [ ! -d "$KAFKA_INSTALL_DIR/$KAFKA_FILENAME" ]; then
    tar -xzf $KAFKA_ARCHIVE_PATH -C $KAFKA_INSTALL_DIR
  else
    echo "$KAFKA_FILENAME is already installed"
  fi

  echo ""
  echo "---------------------------------------"
  printf "\033[32mKafka $VERSION_KAFKA installed\033[39m\n"
  echo ""
  echo "To start Kafka please use :"
  echo ""
  echo "Start the ZooKeeper service"
  echo " cd $KAFKA_HOME"
  echo " bin/zookeeper-server-start.sh config/zookeeper.properties"
  echo " or"
  echo " $KAFKA_HOME/bin/zookeeper-server-start.sh $KAFKA_HOME/config/zookeeper.properties"
  echo ""
  echo "Start the Kafka broker service"
  echo " cd $KAFKA_HOME"
  echo " bin/kafka-server-start.sh config/server.properties"
  echo " or"
  echo " $KAFKA_HOME/bin/kafka-server-start.sh $KAFKA_HOME/config/server.properties"
  echo ""
  echo "https://kafka.apache.org/quickstart"
  echo ""
  echo "---------------------------------------"

}

install-apache-maven(){

  # https://maven.apache.org/download.cgi
  # https://dlcdn.apache.org/maven/maven-3/3.9.1/binaries/apache-maven-3.9.1-bin.tar.gz

  createSoftwareFolder

  if [ ! -z $1 ]; then
    VERSION_MAVEN=$1
  fi

  echo "About to install Apache Maven version : $VERSION_MAVEN"

  # VERSION_MAVEN is to be found in ~.exports
  MAVEN_FILENAME=apache-maven-$VERSION_MAVEN
  MAVEN_ARCHIVE_NAME=$MAVEN_FILENAME-bin.tar.gz
  MAVEN_ARCHIVE_PATH="$SOFTWARE_FOLDER/$MAVEN_ARCHIVE_NAME"
  MAVEN_DOWNLOAD_ADDRESS=https://dlcdn.apache.org/maven/maven-3/$VERSION_MAVEN/binaries/$MAVEN_ARCHIVE_NAME
  MAVEN_INSTALL_DIR="/opt/apache/maven"

  if [ ! -e "$MAVEN_ARCHIVE_PATH" ]; then
    echo "Downloading: $MAVEN_DOWNLOAD_ADDRESS..."
    echo "Download location: $MAVEN_ARCHIVE_PATH"
    wget -P $SOFTWARE_FOLDER $MAVEN_DOWNLOAD_ADDRESS
    if [ $? -ne 0 ]; then
      echo "Not possible to download Apache Maven."
      sleep 20
      exit 1
    fi
  else
    echo "Apache Maven archive already exists."
  fi

  if [ ! -d "$MAVEN_INSTALL_DIR" ]; then
    sudo mkdir -p $MAVEN_INSTALL_DIR
    sudo chown $LOGNAME:$LOGNAME -R $MAVEN_INSTALL_DIR
  fi

  if [ ! -d "$MAVEN_INSTALL_DIR/$MAVEN_FILENAME" ]; then
    echo "Do installation of $MAVEN_FILENAME"
    tar -xzf $MAVEN_ARCHIVE_PATH -C $MAVEN_INSTALL_DIR
  else
    echo "$MAVEN_FILENAME is already installed"
  fi

}

install-apache-maven-mvnd(){

  # https://github.com/apache/maven-mvnd/releases
  # https://github.com/apache/maven-mvnd/releases/download/0.9.0/maven-mvnd-0.9.0-linux-amd64.tar.gz

  createSoftwareFolder

  if [ ! -z $1 ]; then
    VERSION_MVND=$1
  fi

  echo "About to install Apache Maven Daemon version : $VERSION_MVND"

  # VERSION_MVND is to be found in ~.exports
  MVND_FILENAME=maven-mvnd-$VERSION_MVND-linux-amd64
  MVND_ARCHIVE_NAME=$MVND_FILENAME.tar.gz
  MVND_ARCHIVE_PATH="$SOFTWARE_FOLDER/$MVND_ARCHIVE_NAME"
  MVND_DOWNLOAD_ADDRESS=https://github.com/apache/maven-mvnd/releases/download/$VERSION_MVND/$MVND_ARCHIVE_NAME
  MVND_INSTALL_DIR="/opt/apache/mvnd"

  if [ ! -e "$MVND_ARCHIVE_PATH" ]; then
    echo "Downloading: $MVND_DOWNLOAD_ADDRESS..."
    echo "Download location: $MVND_ARCHIVE_PATH"
    wget -P $SOFTWARE_FOLDER $MVND_DOWNLOAD_ADDRESS
    if [ $? -ne 0 ]; then
      echo "Not possible to download Apache Maven Daemon."
      sleep 20
      exit 1
    fi
  else
    echo "Apache Maven Daemon archive already exists."
  fi

  if [ ! -d "$MVND_INSTALL_DIR" ]; then
    sudo mkdir -p $MVND_INSTALL_DIR
    sudo chown $LOGNAME:$LOGNAME -R $MVND_INSTALL_DIR
  fi

  if [ ! -d "$MVND_INSTALL_DIR/$MVND_FILENAME" ]; then
    echo "Do installation of $MVND_FILENAME"
    tar -xzf $MVND_ARCHIVE_PATH -C $MVND_INSTALL_DIR
  else
    echo "$MVND_FILENAME is already installed"
  fi

}

install-apache-ant(){

  # https://ant.apache.org/bindownload.cgi
  # https://dlcdn.apache.org//ant/binaries/apache-ant-1.10.13-bin.tar.gz

  createSoftwareFolder

  if [ ! -z $1 ]; then
    VERSION_ANT=$1
  fi

  echo "About to install Apache Ant version : $VERSION_ANT"

  # VERSION_ANT is to be found in ~.exports
  ANT_FILENAME=apache-ant-$VERSION_ANT
  ANT_ARCHIVE_NAME=$ANT_FILENAME-bin.tar.gz
  ANT_ARCHIVE_PATH="$SOFTWARE_FOLDER/$ANT_ARCHIVE_NAME"
  ANT_DOWNLOAD_ADDRESS=https://dlcdn.apache.org/ant/binaries/$ANT_ARCHIVE_NAME
  ANT_INSTALL_DIR="/opt/apache/ant"

  if [ ! -e "$ANT_ARCHIVE_PATH" ]; then
    echo "Downloading: $ANT_DOWNLOAD_ADDRESS..."
    echo "Download location: $ANT_ARCHIVE_PATH"
    wget -P $SOFTWARE_FOLDER $ANT_DOWNLOAD_ADDRESS
    if [ $? -ne 0 ]; then
      echo "Not possible to download Apache Ant."
      sleep 20
      exit 1
    fi
  else
    echo "Apache Ant archive already exists."
  fi

  if [ ! -d "$ANT_INSTALL_DIR" ]; then
    sudo mkdir -p $ANT_INSTALL_DIR
    sudo chown $LOGNAME:$LOGNAME -R $ANT_INSTALL_DIR
  fi

  if [ ! -d "$ANT_INSTALL_DIR/$ANT_FILENAME" ]; then
    echo "Do installation of $ANT_FILENAME"
    tar -xzf $ANT_ARCHIVE_PATH -C $ANT_INSTALL_DIR
  else
    echo "$ANT_FILENAME is already installed"
  fi

}

install-apache-jmeter(){

  # https://jmeter.apache.org/download_jmeter.cgi
  # https://dlcdn.apache.org//jmeter/binaries/apache-jmeter-5.5.tgz

  createSoftwareFolder

  if [ ! -z $1 ]; then
    VERSION_JMETER=$1
  fi

  echo "About to install Apache JMeter version : $VERSION_JMETER"

  # VERSION_AVERSION_JMETER is to be found in ~.exports
  JMETER_FILENAME=apache-jmeter-$VERSION_JMETER
  JMETER_ARCHIVE_NAME=$JMETER_FILENAME.tgz
  JMETER_ARCHIVE_PATH="$SOFTWARE_FOLDER/$JMETER_ARCHIVE_NAME"
  JMETER_DOWNLOAD_ADDRESS=https://dlcdn.apache.org/jmeter/binaries/$JMETER_ARCHIVE_NAME
  JMETER_INSTALL_DIR="/opt/apache/jmeter"

  if [ ! -e "$JMETER_ARCHIVE_PATH" ]; then
    echo "Downloading: $JMETER_DOWNLOAD_ADDRESS..."
    echo "Download location: $JMETER_ARCHIVE_PATH"
    wget -P $SOFTWARE_FOLDER $JMETER_DOWNLOAD_ADDRESS
    if [ $? -ne 0 ]; then
      echo "Not possible to download Apache JMeter."
      sleep 20
      exit 1
    fi
  else
    echo "Apache JMeter archive already exists."
  fi

  if [ ! -d "$JMETER_INSTALL_DIR" ]; then
    sudo mkdir -p $JMETER_INSTALL_DIR
    sudo chown $LOGNAME:$LOGNAME -R $JMETER_INSTALL_DIR
  fi

  if [ ! -d "$JMETER_INSTALL_DIR/$JMETER_FILENAME" ]; then
    echo "Do installation of $JMETER_FILENAME"
    tar -xzf $JMETER_ARCHIVE_PATH -C $JMETER_INSTALL_DIR
  else
    echo "$JMETER_FILENAME is already installed"
  fi

}

install-bytecode-viewer(){

  # https://github.com/Konloch/bytecode-viewer/releases
  # https://github.com/Konloch/bytecode-viewer/releases/download/v2.11.2/Bytecode-Viewer-2.11.2.jar

  createSoftwareFolder

  if [ ! -z $1 ]; then
    VERSION_BYTECODE_VIEWER=$1
  fi

  echo "About to install Bytecode Viewer version : $VERSION_BYTECODE_VIEWER"

  # VERSION_ANT is to be found in ~.exports
  BYTECODE_VIEWER_FILENAME="Bytecode-Viewer-$VERSION_BYTECODE_VIEWER.jar"
  BYTECODE_VIEWER_ARCHIVE_PATH="$SOFTWARE_FOLDER/$BYTECODE_VIEWER_FILENAME"
  BYTECODE_VIEWER_DOWNLOAD_ADDRESS=https://github.com/Konloch/bytecode-viewer/releases/download/v$VERSION_BYTECODE_VIEWER/$BYTECODE_VIEWER_FILENAME
  BYTECODE_VIEWER_INSTALL_DIR="/opt/bytecode-viewer"

  if [ ! -e "$BYTECODE_VIEWER_ARCHIVE_PATH" ]; then
    echo "Downloading: $BYTECODE_VIEWER_DOWNLOAD_ADDRESS..."
    echo "Download location: $BYTECODE_VIEWER_ARCHIVE_PATH"
    wget -P $SOFTWARE_FOLDER $BYTECODE_VIEWER_DOWNLOAD_ADDRESS
    if [ $? -ne 0 ]; then
      echo "Not possible to download Bytecode Viewer."
      sleep 20
      exit 1
    fi
  else
    echo "Bytecode Viewer archive already exists."
  fi

  if [ ! -d "$BYTECODE_VIEWER_INSTALL_DIR" ]; then
    sudo mkdir -p $BYTECODE_VIEWER_INSTALL_DIR
    sudo chown $LOGNAME:$LOGNAME -R $BYTECODE_VIEWER_INSTALL_DIR
  fi

  if [ ! -f "$BYTECODE_VIEWER_INSTALL_DIR/$BYTECODE_VIEWER_FILENAME" ]; then
    echo "Do installation of $BYTECODE_VIEWER_FILENAME"
    cp $BYTECODE_VIEWER_ARCHIVE_PATH $BYTECODE_VIEWER_INSTALL_DIR/$BYTECODE_VIEWER_FILENAME
  else
    echo "$BYTECODE_VIEWER_FILENAME is already installed"
  fi

}

install-keycloak(){

  # https://github.com/keycloak/keycloak/releases

  createSoftwareFolder

  if [ ! -z $1 ]; then
    VERSION_KEYCLOAK=$1
  fi

  echo "About to install Keycloak version : $VERSION_KEYCLOAK"

  # VERSION_KEYCLOAK is to be found in ~.exports
  KEYCLOAK_FILENAME=keycloak-$VERSION_KEYCLOAK
  KEYCLOAK_ARCHIVE_NAME=$KEYCLOAK_FILENAME.tar.gz
  KEYCLOAK_ARCHIVE_PATH="$SOFTWARE_FOLDER/$KEYCLOAK_FILENAME.tar.gz"
  KEYCLOAK_DOWNLOAD_ADDRESS=https://github.com/keycloak/keycloak/releases/download/$VERSION_KEYCLOAK/$KEYCLOAK_ARCHIVE_NAME
  KEYCLOAK_INSTALL_DIR="/opt/keycloak"

  if [ ! -e "$KEYCLOAK_ARCHIVE_PATH" ]; then
    echo "Downloading: $KEYCLOAK_DOWNLOAD_ADDRESS..."
    echo "Download location: $KEYCLOAK_ARCHIVE_PATH"
    wget -q -P $SOFTWARE_FOLDER $KEYCLOAK_DOWNLOAD_ADDRESS
    if [ $? -ne 0 ]; then
      echo "Not possible to download Keycloak."
      sleep 20
      exit 1
    fi
  else
    echo "Keycloak archive already exists."
  fi

  if [ ! -d "$KEYCLOAK_INSTALL_DIR" ]; then
    sudo mkdir -p $KEYCLOAK_INSTALL_DIR
    sudo chown $LOGNAME:$LOGNAME -R $KEYCLOAK_INSTALL_DIR
  fi

  if [ ! -d "$KEYCLOAK_INSTALL_DIR/$KEYCLOAK_FILENAME" ]; then
    tar -xzf $KEYCLOAK_ARCHIVE_PATH -C $KEYCLOAK_INSTALL_DIR
  else
    echo "$KEYCLOAK_FILENAME is already installed"
  fi

  echo ""
  echo "---------------------------------------"
  printf "\033[32mKeycloak $VERSION_KEYCLOAK installed\033[39m\n"
  echo ""
  echo "To start Keycloak please use :"
  echo " cd $KEYCLOAK_INSTALL_DIR/$KEYCLOAK_FILENAME"
  echo " bin/kc.sh start-dev"
  echo ""
  echo "https://www.keycloak.org/getting-started/getting-started-zip#_start_keycloak"
  echo ""
  echo "---------------------------------------"

}

install-wildfly(){

  # https://www.wildfly.org/downloads/

  createSoftwareFolder

  if [ ! -z $1 ]; then
    VERSION_WILDFLY=$1
  fi

  echo "About to install Wildfly version : $VERSION_WILDFLY"

  # VERSION_WILDFLY is to be found in ~.exports
  WILDFLY_FILENAME=wildfly-$VERSION_WILDFLY
  WILDFLY_ARCHIVE_NAME=$WILDFLY_FILENAME.tar.gz
  WILDFLY_ARCHIVE_PATH="$SOFTWARE_FOLDER/$WILDFLY_ARCHIVE_NAME"
  WILDFLY_DOWNLOAD_ADDRESS=https://github.com/wildfly/wildfly/releases/download/$VERSION_WILDFLY/$WILDFLY_ARCHIVE_NAME
  WILDFLY_INSTALL_DIR="/opt/wildfly"

  if [ ! -e "$WILDFLY_ARCHIVE_PATH" ]; then
    echo "Downloading: $WILDFLY_DOWNLOAD_ADDRESS..."
    echo "Download location: $WILDFLY_ARCHIVE_PATH"
    wget -P $SOFTWARE_FOLDER $WILDFLY_DOWNLOAD_ADDRESS
    if [ $? -ne 0 ]; then
      echo "Not possible to download Wildfly."
      sleep 20
      exit 1
    fi
  else
    echo "Wildfly archive already exists."
  fi

  if [ ! -d "$WILDFLY_INSTALL_DIR" ]; then
    sudo mkdir -p $WILDFLY_INSTALL_DIR
    sudo chown $LOGNAME:$LOGNAME -R $WILDFLY_INSTALL_DIR
  fi

  if [ ! -d "$WILDFLY_INSTALL_DIR/$WILDFLY_FILENAME" ]; then
    tar -xzf $WILDFLY_ARCHIVE_PATH -C $WILDFLY_INSTALL_DIR
  else
    echo "$WILDFLY_FILENAME is already installed"
  fi

  echo ""
  echo "---------------------------------------"
  printf "\033[32mWildfly $WILDFLY_FILENAME installed\033[39m\n"
  echo ""
  echo "To start Wildfly please use :"
  echo " cd $WILDFLY_INSTALL_DIR/$WILDFLY_FILENAME"
  echo " bin/standalone.sh"
  echo ""
  echo "https://github.com/jboss-developer/jboss-developer-shared-resources/blob/master/guides/START_JBOSS_EAP.adoc#start_the_jboss_eap_server"
  echo ""
  echo "---------------------------------------"

}

install-jdk(){

  VERSION_JAVA_EIGHT_ADOPTIUM_TAG=$VERSION_JAVA_EIGHT
  VERSION_JAVA_EIGHT_ADOPTIUM_ARCHIVE_NAME="OpenJDK8U-jdk_x64_linux_hotspot_8u362b09.tar.gz"

  VERSION_JAVA_ELEVEN_ADOPTIUM_TAG=$( eval "rawurlencode $VERSION_JAVA_ELEVEN")
  VERSION_JAVA_ELEVEN_ADOPTIUM_ARCHIVE_NAME="OpenJDK11U-jdk_x64_linux_hotspot_11.0.18_10.tar.gz"

  VERSION_JAVA_SEVENTEEN_ADOPTIUM_TAG=$( eval "rawurlencode $VERSION_JAVA_SEVENTEEN")
  VERSION_JAVA_SEVENTEEN_ADOPTIUM_ARCHIVE_NAME="OpenJDK17U-jdk_x64_linux_hotspot_17.0.6_10.tar.gz"

  VERSION_JAVA_EIGHTEEN_ADOPTIUM_TAG=$( eval "rawurlencode $VERSION_JAVA_EIGHTEEN")
  VERSION_JAVA_EIGHTEEN_ADOPTIUM_ARCHIVE_NAME="OpenJDK18U-jdk_x64_linux_hotspot_18.0.2.1_1.tar.gz"

  VERSION_JAVA_NINETEEN_ADOPTIUM_TAG=$( eval "rawurlencode $VERSION_JAVA_NINETEEN")
  VERSION_JAVA_NINETEEN_ADOPTIUM_ARCHIVE_NAME="OpenJDK19U-jdk_x64_linux_hotspot_19.0.2_7.tar.gz"

  JDK_VERSION=$1

  echo "JDK_VERSION : $JDK_VERSION"

  case $JDK_VERSION in
    19)
      # https://github.com/adoptium/temurin19-binaries
      ADOPTIUM_TOP_VERSION=19
      ADOPTIUM_TAG_VERSION=$VERSION_JAVA_NINETEEN_ADOPTIUM_TAG
      ADOPTIUM_FOLDER=$VERSION_JAVA_NINETEEN
      ADOPTIUM_ARCHIVE_NAME=$VERSION_JAVA_NINETEEN_ADOPTIUM_ARCHIVE_NAME
    ;;

    18)
      # https://github.com/adoptium/temurin18-binaries
      ADOPTIUM_TOP_VERSION=18
      ADOPTIUM_TAG_VERSION=$VERSION_JAVA_EIGHTEEN_ADOPTIUM_TAG
      ADOPTIUM_FOLDER=$VERSION_JAVA_EIGHTEEN
      ADOPTIUM_ARCHIVE_NAME=$VERSION_JAVA_EIGHTEEN_ADOPTIUM_ARCHIVE_NAME
    ;;

    17)
      # https://github.com/adoptium/temurin17-binaries
      ADOPTIUM_TOP_VERSION=17
      ADOPTIUM_TAG_VERSION=$VERSION_JAVA_SEVENTEEN_ADOPTIUM_TAG
      ADOPTIUM_FOLDER=$VERSION_JAVA_SEVENTEEN
      ADOPTIUM_ARCHIVE_NAME=$VERSION_JAVA_SEVENTEEN_ADOPTIUM_ARCHIVE_NAME
    ;;

    11)
      # https://github.com/adoptium/temurin11-binaries
      ADOPTIUM_TOP_VERSION=11
      ADOPTIUM_TAG_VERSION=$VERSION_JAVA_ELEVEN_ADOPTIUM_TAG
      ADOPTIUM_FOLDER=$VERSION_JAVA_ELEVEN
      ADOPTIUM_ARCHIVE_NAME=$VERSION_JAVA_ELEVEN_ADOPTIUM_ARCHIVE_NAME
    ;;

    8)
      # https://github.com/adoptium/temurin8-binaries
      ADOPTIUM_TOP_VERSION=8
      ADOPTIUM_TAG_VERSION=$VERSION_JAVA_EIGHT_ADOPTIUM_TAG
      ADOPTIUM_FOLDER=$VERSION_JAVA_EIGHT
      ADOPTIUM_ARCHIVE_NAME=$VERSION_JAVA_EIGHT_ADOPTIUM_ARCHIVE_NAME
    ;;

    *)
      ADOPTIUM_TOP_VERSION=17
      ADOPTIUM_TAG_VERSION=$VERSION_JAVA_SEVENTEEN_ADOPTIUM_TAG
      ADOPTIUM_FOLDER=$VERSION_JAVA_SEVENTEEN
      ADOPTIUM_ARCHIVE_NAME=$VERSION_JAVA_SEVENTEEN_ADOPTIUM_ARCHIVE_NAME
    ;;
  esac

  JAVA_INSTALL_DIR="/opt/java"
  JDK_BASE_URL="https://github.com/adoptium/temurin"$ADOPTIUM_TOP_VERSION"-binaries/releases/download/$ADOPTIUM_TAG_VERSION/$ADOPTIUM_ARCHIVE_NAME"

  JDK_ARCHIVE_PATH="$SOFTWARE_FOLDER/$ADOPTIUM_ARCHIVE_NAME"

  echo "ADOPTIUM_ARCHIVE_NAME : $ADOPTIUM_ARCHIVE_NAME"
  echo "JDK_ARCHIVE_PATH : $JDK_ARCHIVE_PATH"

  if [ ! -f "$JDK_ARCHIVE_PATH" ]; then
    wget -P $SOFTWARE_FOLDER $JDK_BASE_URL
  fi

  if [ ! -d "$JAVA_INSTALL_DIR" ]; then
    sudo mkdir -p $JAVA_INSTALL_DIR
    sudo chown $LOGNAME:$LOGNAME -R $JAVA_INSTALL_DIR
    echo "Folder $JAVA_INSTALL_DIR was created"
  else
    echo "Folder $JAVA_INSTALL_DIR already existed"
  fi

  if [ ! -d "$JAVA_INSTALL_DIR/$ADOPTIUM_FOLDER" ]; then
    tar -xzf $JDK_ARCHIVE_PATH -C $JAVA_INSTALL_DIR
  else
    echo "$ADOPTIUM_FOLDER is already installed"
  fi

  echo "Java install in the folder $ADOPTIUM_FOLDER"

}

install-jdk8(){
  echo "Starting to install jdk 8"
  install-jdk 8
}

install-jdk11(){
  echo "Starting to install jdk 11"
  install-jdk 11
}

install-jdk17(){
  echo "Starting to install jdk 17"
  install-jdk 17
}

install-jdk18(){
  echo "Starting to install jdk 18"
  install-jdk 18
}

install-jdk19(){
  echo "Starting to install jdk 19"
  install-jdk 19
}

