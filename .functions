#!/bin/bash

# Create a new directory and enter it
mkd() {
	mkdir -p "$@"
	cd "$@" || exit
}

function settitle() {
    if [ $# -eq 0 ]
        then
        eval set -- "\\u@\\h: \\w"
    fi

    case $TERM in
        xterm*) local title="\[\033]0;$@\007\]";;
        *) local title=''
    esac
    local prompt=$(echo "$PS1" | sed -e 's/\\\[\\033\]0;.*\\007\\\]//')
    PS1="${title}${prompt}"
}

# Syntax-highlight JSON strings or files
# Usage: `json '{"foo":42}'` or `echo '{"foo":42}' | json`
json() {
	if [ -t 0 ]; then # argument
		python -mjson.tool <<< "$*" | pygmentize -l javascript
	else # pipe
		python -mjson.tool | pygmentize -l javascript
	fi
}

# Display - Network infomation - Only ips
mynetworkLight(){
	ifconfig -a | grep 'inet ' | grep broadcast | awk '{ print $2 }'
}

# Get colors in manual pages
man() {
	env \
		LESS_TERMCAP_mb="$(printf '\e[1;31m')" \
		LESS_TERMCAP_md="$(printf '\e[1;31m')" \
		LESS_TERMCAP_me="$(printf '\e[0m')" \
		LESS_TERMCAP_se="$(printf '\e[0m')" \
		LESS_TERMCAP_so="$(printf '\e[1;44;33m')" \
		LESS_TERMCAP_ue="$(printf '\e[0m')" \
		LESS_TERMCAP_us="$(printf '\e[1;32m')" \
		man "$@"
}

jv(){
	printf "\e[1;33m~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\033\e[0m"
	printf "\n\e[1;33m~~ ☕ Lets get the JDK version"
	printf "\n\e[1;33m~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\033\e[0m\n"
	printf "\033[32m-------------------------------------------------------------------\n"
	java --version
	printf "\033[32m-------------------------------------------------------------------\033[39m\n"
	printf "\e[1;33m~~ "
	printf "\n\e[1;33m~~ JAVA_HOME : ${JAVA_HOME:=NA}"
	printf "\n\e[1;33m~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\033\e[0m"
}

jp(){
	printf "\e[1;33m~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\033\e[0m"
	printf "\n\e[1;33m~~ ☕ Lets have a look at the Proerty settings of the current JDK  \033\e[0m"
	printf "\n\e[1;33m~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\033\e[0m\n"
	printf "\033[32m-------------------------------------------------------------------\n"
	java -XshowSettings:properties -version
	printf "\033[32m-------------------------------------------------------------------\033[39m"
}

# Ban ip from port 25 via iptables
banport25(){
	if [ "$#" -ne 1 ]; then
    	echo "ERROR! You must provide one and only one argument!"
		echo "Use: banport25 127.0.0.1"
	else
		echo "ban from port 25 : $1"
		#sudo iptables -A INPUT -s $1 -p tcp --destination-port 25 -j DROP
	fi
}

# Git Squash
gitS() {
	# Check if the current directory is in a Git repository.
	if [ "$(git rev-parse --is-inside-work-tree &>/dev/null; echo "${?}")" == '0' ]; then

		if [ "X" != "X$1" ]; then
			MESSAGE=""
			if [ "X" != "X$2" ]; then
				MESSAGE=" -m \"$2\""
			fi

			command="git reset --soft HEAD~$1"
			$command

			command="git commit $MESSAGE"
			$command
		else
			echo "Head is first argument"
		fi

	else
		echo "Current directory is NOT in a Git repository"
	fi
}

# https://github.com/sfinktah/bash/blob/master/rawurlencode.inc.sh
# Returns a string in which all non-alphanumeric characters except -_.~ have
# been replaced with a percent (%) sign followed by two hex digits.
#
# Example
# -------
#     easier:    echo http://url/q?=$( rawurlencode "$args" )
#     faster:    rawurlencode "$args"; echo http://url/q?${REPLY}

rawurlencode() {
    local string="${1}"
    local strlen=${#string}
    local encoded=""
    local pos c o

    for (( pos=0 ; pos<strlen ; pos++ )); do
        c=${string:$pos:1}
        case "$c" in
           [-_.~a-zA-Z0-9] ) o="${c}" ;;
           * )               printf -v o '%%%02x' "'$c"
        esac
        encoded+="${o}"
    done
    echo "${encoded}"    # You can either set a return variable (FASTER)
    REPLY="${encoded}"   #+or echo the result (EASIER)... or both... :p
}

quarkus-info(){
	SERVER_PORT=8080
	PID_OF_PORT_IN_USE_SERVER=$(lsof -i:$SERVER_PORT | grep LISTEN | awk '{print $2}')
	if [ "X" != "X$PID_OF_PORT_IN_USE_SERVER" ]; then
		echo "Server on port $SERVER_PORT have pid : $PID_OF_PORT_IN_USE_SERVER"
	fi
}

quarkus-kill(){
	SERVER_PORT=8080
	PID_OF_PORT_IN_USE_SERVER=$(lsof -i:$SERVER_PORT | grep LISTEN | awk '{print $2}')
	if [ "X" != "X$PID_OF_PORT_IN_USE_SERVER" ]; then
		echo "Killing Server on port $SERVER_PORT have pid : $PID_OF_PORT_IN_USE_SERVER"
		kill -kill $PID_OF_PORT_IN_USE_SERVER
	else
		echo "No server running on port $SERVER_PORT"
	fi
}

kafka-server(){

	BROKER_ID=0
	LISTENERS=PLAINTEXT://:9092
	LOG_DIRS=/tmp/kafka-logs-broker

	if [ $# == 0 ] || [ $# == 6 ]; then

		while [[ $# -gt 1 ]]
		do
		key="$1"
		case $key in
			-id|--broker.id)
			BROKER_ID="$2"
			shift # past argument
			;;
			-lis|--listeners)
			LISTENERS="$2"
			shift # past argument
			;;
			-log|--log.dirs)
			LOG_DIRS="$2"
			shift # past argument
			;;
			--default)
			DEFAULT=YES
			;;
			*)
			# unknown option
			;;
		esac
		shift # past argument or value
		done

		$KAFKA_HOME/bin/kafka-server-start.sh \
			$KAFKA_HOME/config/server.properties \
			--override broker.id=$BROKER_ID \
			--override listeners=$LISTENERS \
			--override log.dirs=$LOG_DIRS
	else
		echo ""
		echo "Use:"
		echo "  kafka-server "
		echo "    --broker.id <BROKER_ID> \\"
		echo "    --listeners <LISTENERS> \\"
		echo "    --log.dirs <LOG_DIRS>"
		echo "Use:"
		echo "  kafka-server"
		echo ""
		echo " It is all or nothing"
		echo ""
	fi
}

kafka-info(){

	ZOOKEEPER_PORT=2181
	SERVER_BROKER_0_PORT=9092
	SERVER_BROKER_1_PORT=9093
	SERVER_BROKER_2_PORT=9094
	SERVER_BROKER_3_PORT=9095

 	PID_OF_PORT_IN_USE_ZOOKEEPER=$(lsof -i:$ZOOKEEPER_PORT | grep LISTEN | awk '{print $2}')
	PID_OF_PORT_IN_USE_SERVER_BORKER_0=$(lsof -i:$SERVER_BROKER_0_PORT | grep LISTEN | awk '{print $2}')
	PID_OF_PORT_IN_USE_SERVER_BORKER_1=$(lsof -i:$SERVER_BROKER_1_PORT | grep LISTEN | awk '{print $2}')
	PID_OF_PORT_IN_USE_SERVER_BORKER_2=$(lsof -i:$SERVER_BROKER_2_PORT | grep LISTEN | awk '{print $2}')
	PID_OF_PORT_IN_USE_SERVER_BORKER_3=$(lsof -i:$SERVER_BROKER_3_PORT | grep LISTEN | awk '{print $2}')

	if [ "X" != "X$PID_OF_PORT_IN_USE_ZOOKEEPER" ]; then
		echo "Zookeeper runing on port $ZOOKEEPER_PORT have pid : $PID_OF_PORT_IN_USE_ZOOKEEPER"
	else
		echo "No Zookeeper runing on port $ZOOKEEPER_PORT"
	fi
	if [ "X" != "X$PID_OF_PORT_IN_USE_SERVER_BORKER_0" ]; then
		echo "Server (broker:0) on port $SERVER_BROKER_0_PORT have pid : $PID_OF_PORT_IN_USE_SERVER_BORKER_0"
	fi
	if [ "X" != "X$PID_OF_PORT_IN_USE_SERVER_BORKER_1" ]; then
		echo "Server (broker:1) on port $SERVER_BROKER_2_PORT have pid : $PID_OF_PORT_IN_USE_SERVER_BORKER_1"
	fi
	if [ "X" != "X$PID_OF_PORT_IN_USE_SERVER_BORKER_2" ]; then
		echo "Server (broker:2) on port $SERVER_BROKER_3_PORT have pid : $PID_OF_PORT_IN_USE_SERVER_BORKER_2"
	fi
	if [ "X" != "X$PID_OF_PORT_IN_USE_SERVER_BORKER_3" ]; then
		echo "Server (broker:3) on port $SERVER_BROKER_3_PORT have pid : $PID_OF_PORT_IN_USE_SERVER_BORKER_3"
	fi

}

kafka-kill-all(){

	ZOOKEEPER_PORT=2181
	SERVER_BROKER_0_PORT=9092
	SERVER_BROKER_1_PORT=9093
	SERVER_BROKER_2_PORT=9094
	SERVER_BROKER_3_PORT=9095

 	PID_OF_PORT_IN_USE_ZOOKEEPER=$(lsof -i:$ZOOKEEPER_PORT | grep LISTEN | awk '{print $2}')
	PID_OF_PORT_IN_USE_SERVER_BORKER_0=$(lsof -i:$SERVER_BROKER_0_PORT | grep LISTEN | awk '{print $2}')
	PID_OF_PORT_IN_USE_SERVER_BORKER_1=$(lsof -i:$SERVER_BROKER_1_PORT | grep LISTEN | awk '{print $2}')
	PID_OF_PORT_IN_USE_SERVER_BORKER_2=$(lsof -i:$SERVER_BROKER_2_PORT | grep LISTEN | awk '{print $2}')
	PID_OF_PORT_IN_USE_SERVER_BORKER_3=$(lsof -i:$SERVER_BROKER_3_PORT | grep LISTEN | awk '{print $2}')

	if [ "X" != "X$PID_OF_PORT_IN_USE_SERVER_BORKER_0" ]; then
		echo "Killing server (broker:0) on port $SERVER_BROKER_0_PORT have pid : $PID_OF_PORT_IN_USE_SERVER_BORKER_0"
		kill -15 $PID_OF_PORT_IN_USE_SERVER_BORKER_0
	fi
	if [ "X" != "X$PID_OF_PORT_IN_USE_SERVER_BORKER_1" ]; then
		echo "Killing server (broker:1) on port $SERVER_BROKER_2_PORT have pid : $PID_OF_PORT_IN_USE_SERVER_BORKER_1"
		kill -15 $PID_OF_PORT_IN_USE_SERVER_BORKER_1
	fi
	if [ "X" != "X$PID_OF_PORT_IN_USE_SERVER_BORKER_2" ]; then
		echo "Killing server (broker:2) on port $SERVER_BROKER_3_PORT have pid : $PID_OF_PORT_IN_USE_SERVER_BORKER_2"
		kill -15 $PID_OF_PORT_IN_USE_SERVER_BORKER_2
	fi
	if [ "X" != "X$PID_OF_PORT_IN_USE_SERVER_BORKER_3" ]; then
		echo "Killing server (broker:3) on port $SERVER_BROKER_3_PORT have pid : $PID_OF_PORT_IN_USE_SERVER_BORKER_3"
		kill -15 $PID_OF_PORT_IN_USE_SERVER_BORKER_3
	fi

	if [ "X" != "X$PID_OF_PORT_IN_USE_ZOOKEEPER" ]; then
		echo "Killing zookeeper runing on port $ZOOKEEPER_PORT have pid : $PID_OF_PORT_IN_USE_ZOOKEEPER"
		kill -15 $PID_OF_PORT_IN_USE_ZOOKEEPER
	else
		echo "No Zookeeper runing on port $ZOOKEEPER_PORT"
	fi

	# https://stackoverflow.com/questions/690415/in-what-order-should-i-send-signals-to-gracefully-shutdown-processes
	# Signal     Value     Action   Comment
	# ----------------------------------------------------------------------
	# SIGTERM      15       Term    Termination signal
	# SIGINT        2       Term    Famous CONTROL+C interrupt from keyboard
	# SIGHUP        1       Term    Disconnected terminal or parent died
	# SIGPIPE      13       Term    Broken pipe
	# SIGALRM(*)   14       Term    Timer signal from alarm
	# SIGUSR2(*)   12       Term    User-defined signal 2
	# SIGUSR1(*)   10       Term    User-defined signal 1
	# SIGQUIT       3       Core    CONTRL+\ or quit from keyboard
	# SIGABRT       6       Core    Abort signal from abort(3)
	# SIGSEGV      11       Core    Invalid memory reference
	# SIGILL        4       Core    Illegal Instruction
	# SIGFPE        8       Core    Floating point exception
	# SIGKILL       9       Term    Kill signal

}

podman-createNetwork(){

	NETWORK=$1
	podman network exists $NETWORK

	if [ $? != 0 ]; then
		echo "The network $NETWORK did not exists"
		podman network create $NETWORK
	else
		echo "We already have $PODMAN_NETWORK as a network"
	fi

}

podman-removeContainer(){

    CONTAINER=$1
    echo "Container to remove : $CONTAINER"

    podman container exists $CONTAINER

    if [ $? = 0 ]; then
        echo "We will stop and remove the pod $CONTAINER"
        podman stop $CONTAINER
        podman rm $CONTAINER
	else
		echo "The container $CONTAINER does not exists"
    fi
}

podman-removeVolume(){

    VOLUME=$1
    echo "Volume to remove : $VOLUME"

    podman volume exists $VOLUME

    if [ $? = 0 ]; then
        echo "We will remove the volume $VOLUME"
        podman network rm $VOLUME
	else
		echo "The volume $VOLUME does not exist"	
    fi

    echo "----"
}